\documentclass{report}

\usepackage[utf8]{inputenc}
\usepackage[francais]{babel}
%\usepackage{listings}
\title{TER, développement d'un émulateur de GameBoy}
\author{BERGER Mickaël \\ DIVET Joachim \\ VINARD Florian}
\date{17 Mai 2013}

\begin{document}
\maketitle

\tableofcontents
\section{GPU}

Le GPU de la GameBoy est intégré dans le même circuit intégre que le CPU. Sa fonction est de générer une image à partit des données contenues dans la VRAM (vidéo ram) puis de l'envoyer à l'écran LCD, il possède différents registres de configuration.

\subsection{Fonctionnement de l'écran}

L'affichage de la Gameboy se fait via un ecran LCD d'une résolution de 160*144 pixels. Cet affichage se fait en périodes, il va tout d'abord afficher une ligne puis passer dans une période dites de HBlank ce qui correspond à un retour à la ligne puis afficher la ligne suivante. Ce cycle s'effectue jusqu'à la dernière ligne, s'en suit alors une période de VBlank qui correspond à un retour à la première ligne.
Ces périodes de VBlank ou de HBlank ont un nombre de cycles défini, c'est
durant ces périodes que l'accés au différentes matrices en écriture va être
débloqué pour que le CPU puisse modifier les éléments à afficher.\\

->schéma d'affichage

\subsection{Génération d'une ligne}

Trois types de couches peuvent être affichés: la couche background, la couche
window et la couche sprites, les deux première peuvent être activées ou
désactivées selon les jeu en modifiant un registre ( à l'adresse FF40 ).

Ces trois couches ont des rôles différents et servent à séparer différents
éléments graphiques d'un jeu.\\

\begin{itemize}
\item \textbf{La couche Background:}
	Cette couche comprends tout les éléments qui appartiennent au décor du
jeu. Elle est représentée par deux matrice de 256*256 pixels, soit 32*32
tuiles (carré de 8*8 pixels). La Gameboy peut donc passer d'une matrice à
l'autre pour afficher les différents éléments du décor. Ces matrices étant
d'une taille supérieure à celle de l'écran lors de l'affichage, la positionne
l'écran sur une zone d'une des matrices via la modification des valeurs de
deux registres. L'écran peut ainsi naviguer sur ces matrices pour modifier
l'affichage.\\

\item \textbf{La couche Window:}
	Cette couche est généralement utilisée pour tous les éléments statique
d'un jeu, comme la barre de menu ou les scores. Elle a un comportement
similaire à celui de la couche Background si ce n'est qu'elle ne possède qu'une seule
matrice et qu'elle est positionnée par rapport à l'écran et non l'inverse.\\

\item \textbf{La couche Sprites:}
	Cette couche est utilisées pour représenter les objets d'intérets d'un
jeu (personnages, objets, etc). Elle est représentée en mémoire par un maximum
de 40 tuiles différentes. Ces tuiles sont positionnées à l'écran via un registre indiquant leur position absolue, ainsi que diverses options d'affichage comme la possibilité d'appliquer une symétrie verticale ou horizontale sur la tuile.\\
\end{itemize}

\subsection{Les couleurs}

Les couches Background et Window utilisent un registre (palette monochrome) pour gérer les
couleurs des différents pixels, dans le cas de la Gameboy ce registre contient
4 niveaux de gris codés sur 2 bits.

La couche Sprite peux utiliser deux palettes qui diffèrent en un point de la
palette précédente, la valeur 00 ne correspond pas au blanc mais au fait que
le pixel soit transparent.\\

\subsection{Les registres d'affichage}
\subsubsection{LCD Control Register}
C'est un registre 8 bits accessible en lecture et écriture situé à l'adresse 0xFF40, il permet de gérer les principales options d'affichage de l'écran LCD:\\

\begin{itemize}
\item \textbf{bit 0:}
	Permet de gérer l'affichage du Background, mis à 0 il permet d'afficher un fond blanc à la place du Background. mis à 1 le Background sera affiché normalement.\\
\item \textbf{bit 1:}
	Permet l'affichage ou non des sprites.\\
\item \textbf{bit 2:}
	Ce bit indique la taille des sprites utilisés. S'il est mis à 0, des sprites de 8*8 seront utilisés, par contre s'il est mis à 1 les sprites auront une taille de 8*16.\\
\item \textbf{bit 3:}
	Ce bit permet de choisir qu'elle matrice de tuiles l'on va utilisée pour afficher le Background. Mis: à 0 la matrice située entre 0x9800 et 0x9BFF sera utilisée, à 1 la matrice située entre 0x9C00 et 0x9FFF sera utilisée.\\
\item \textbf{bit 4:}
	Même fonctionnement que le bit précédent sauf que celui-ci sert à choisir la matrice contenant les données des tuiles. La matrice contenu entre les adresses 0x8800 et 0x97FF est choisi si le bit est à 0, sinon c'est celle entre les adresses 0x8000 et 0x8FFF si le bit est à 1.\\
\item \textbf{bit 5:}
	Permet de choisir si l'on affiche ou non la Window. Si 0 elle n'est pas affichée, si 1 on l'affiche.\\
\item \textbf{bit 6:}
	Même fonctionnement que le bit 3 sauf qu'il permet de choisr la matrice de tuiles pour afficher la Window.\\
\item \textbf{bit 7:}
	Ce bit sert à activer ou désactiver l'écran LCD. Il ne doit être désactiver seulement pendant les périodes de VBlank sous peine d'endommager la Game Boy. Mettre à 0 ce bit rend aussi accessible librement la VRAM et OAM.\\
\end{itemize}

\subsubsection{LCD Status Register}
Ce registre 8 bits est accessible en lecture et écriture, il est situé à l'adresse 0xFF41 et permet de gérer les interruptions liées au GPU:\\

\begin{itemize}
\item \textbf{bit 0-1}
	Ces bits correspondent au Mode Flag et sont accessibles seulement en lecture, ils déterminent dans quelle période l'on se trouve: 0 pour le HBlank, 1 pour le VBlank, 2 pour la lecture de la mémoire OAM et 3 pour le transfert des données vers l'écran LCD.\\
\item \textbf{bit 2:}
	Accessible seulement en lecture, il représente le "Coincidence Flag", il est mis à 0 si les registres LYC et LY sont différents, à 1 sinon.\\
\item \textbf{bit 3:}
	Ce bit est mis à 1 si il y a une interruption liée au HBlank qui doit être faite.\\
\item \textbf{bit 4:} 
	Idem que le bit précédent mais pour le VBlank.\\
\item \textbf{bit 5:}
	Idem mais pour la mémoire OAM.\\
\item \textbf{bit 6:}
	Ce bit est activé si la valeur du registre LYC et celle du registre LY sont égale, une interruption sera alors déclenchée.\\
\item \textbf{bit 7:}
	Il n'est pas utilisé.\\
\end{itemize}

\subsection{OAM}
	La table OAM (Object Attribute Memory) est située entre les adresse 0xFE00 et 0xFE9F, elle contient tout les attributs liés au sprites. Elle est accessible uniquement pendant les périodes de HBlank et de VBlank. Elle est composée de 40 entrées de 4 bytes chacunes:\\

\begin{itemize}
\item \textbf{byte 0:}
	Ce byte spécifie la position verticale du sprite, suivant sa valeur le sprites sera visible ou non (les valeurs verticales de l'écran allant de 16 à 160).\\
\item \textbf{byte 1:}
	Ce byte spécifie la position horizontale du sprite, les valeurs doivent être comprises entre 8 et 168 pour que le sprite soit visible.\\
\item \textbf{byte 2:}
	Ce byte correspond au numéro de la tuile à aller chercher dans la matrice contenant toutes les tuiles située entre 0x8000 et 0x8FFF.\\
\item \textbf{byte 3:}
	\begin{itemize}
	\item \textbf{bit 0-3:}
		Utilisés uniquement pour la Game Boy Color.\\
	\item \textbf{bit 4:}
		Permet de choisir laquelle des deux palettes de couleurs, l'on va utiliser.\\
	\item \textbf{bit 5:}
		S'il est activé, l'on applique une symétrie horizontale sur le sprite.\\
	\item \textbf{bit 6:}
		S'il est activé, l'on applique une symétrie verticale sur le sprite.\\
	\item \textbf{bit 7:}
		Ce bit indique la priorité entre le sprite et le Background, s'il est à 0 le sprite a la priorité sinon c'est l'inverse.\\
	\end{itemize}
	
\end{itemize}

\subsection{VRAM}
	


\subsection{Exemple d'affichage}

->schéma

\section{Cartouche de jeu}
Une cartouche de jeu est composée au minimum d'une mémoire (un circuit intégré) appelée ROM (Read Only Memory), mais peut aussi contenir dans certains cas de la RAM (Random Access Memory) ou d'autres composants que nous verrons un peu plus loin.

\subsection{Le header}
Dans chaque cartouche, une zone d'information la concernant est située entre les adresses 0x0100 et 0x014F, cette zone est appelée le header. Les différentes informations contenues dans cette zone sont les suivantes:\\

\begin{itemize}

\item \textbf{0x0100-0x0103:} Cette addresse est le point d'entrée du programme, après l'affichage du logo Nintendo, le processeur va faire un "jump" vers cette adresse, puis faire un autre "jump" vers la valeur qu'elle contient qui est en fait l'adresse du début du programme.\\

\item \textbf{0x0104-0x0133:} Cette addresse contient les bytes permettant l'affichage du logo Nintendo quand la Game Boy s'allume. Les valeurs sont les suivantes:
\\CE ED 66 66 CC 0D 00 0B 03 73 00 83 00 0C 00 0D
\\00 08 11 1F 88 89 00 0E DC CC 6E E6 DD DD D9 99
\\BB BB 67 63 6E 0E EC CC DD DC 99 9F BB B9 33 3E\\

\item \textbf{0x0134-0x0143:} Le titre du jeu est stocké à cette adresse, il est écrit en majuscule et en ASCII.\\

\item \textbf{0x013F-0x0142:} Cette adresse correspond au code de l'entreprise qui a créée le jeu, par exemple pour Nintendo cette adresse aura la valeur: 0x33.\\

\item \textbf{0x0143:} Le CGB (Color Game Boy) Flag est contenu à cette adresse, il permet d'indiquer si le jeu est compatible avec les autres Game Boy ou seulement avec la Game Boy Color.\\

\item \textbf{0x0144-0x0145:} Cette adresse contient deux caractères ASCII qui indiquent la société ayant publié le jeu.\\

\item \textbf{0x0146:} Le SGB (Super Game Boy) Flag est stocké ici, il permet de savoir si le jeu est compatible avec les fonctionnalités de la SGB.\\

\item \textbf{0x0147:} Cette adresse spécifie quel MBC (Memory Bank Controller) est utilisé par la cartouche et si il y a des composants externes comme une batterie ou une caméra. Nous aborderons cette partie un peu plus loin.\\

\item \textbf{0x0148:} La taille de la ROM est indiquée à cette adresse:
\\00h -  32KByte (pas de banque)
\\01h -  64KByte (4 banques)
\\02h - 128KByte (8 banques)
\\03h - 256KByte (16 banques)
\\04h - 512KByte (32 banques)
\\05h -   1MByte (64 banques)
\\06h -   2MByte (128 banques)
\\07h -   4MByte (256 banques)
\\52h - 1.1MByte (72 banques)
\\53h - 1.2MByte (80 banques)
\\54h - 1.5MByte (96 banques)\\

\item \textbf{0x0149:} La taille de la RAM est indiquée à cette adresse:
\\00h - Aucune
\\01h - 2 KBytes
\\02h - 8 Kbytes
\\03h - 32 KBytes\\

\item \textbf{0x014A:} Cette adresse contient le code qui indique si le jeu est censé être vendu au Japon ou ailleurs.\\

\item \textbf{0x014D:} Le Header Checksum est contenu ici. Lors du lancement d'un jeu si les 8 bits de poids faible du résultat du checksum ne sont pas égaux à ceux contenus à cette adresse , le jeu ne se lancera pas.\\

\end{itemize}

\subsection{Memory Bank Controllers}
Les bus d'adressage de 16 bits de la Game Boy offrent un espace d'adressage limité pour la ROM et la RAM , de ce fait la plupart des cartouches utilisent une puce nommée MBC qui permet d'étendre cet espace en changeant de banque. Les différents types de puces MBC utilisées par la Game Boy sont les suivantes:\\


\subsubsection{aucun}
	Les petits jeu qui ne dépassent pas 32 KBytes de ROM ne requièrent pas de puce MBC, la ROM est directement répartit sur les adresses 0x0000 à 0x7FFF et la RAM de 0xA000 à 0xBFFF. Ces jeu contiennent tout de même une petite puce qui ressemble à une puce MBC mais n'en est pas une.\\
\subsubsection{MBC1}
	La puce MBC1 est la première puce MBC, toute les suivantes fonctionnent de manière similaire, ce qui permet une compatibilité et une mise à niveau relativement simple. Cette puce est utilisée pour les jeux ne dépassant pas 2MByte de ROM et/ou 32 KByte de RAM.

La répartition des adresses est la suivante:\\
\begin{itemize}
\item \textbf{0x0000-0x3FFF:} La banque de ROM 00 , cette banque contient toujours les 16 premiers KBytes de la ROM de la cartouche.\\
\item \textbf{0x4000-0x7FFF:} Les banques de ROM 01 à 7F, cette zone contient toutes les autres banques de 16 KBytes, ce qui correspond à un total de 125 banques utilisables car les banques 0x20, 0x40 et 0x60 ne sont pas accessibles.\\
\item \textbf{0xA000-0xBFFF:} Les banques de RAM 00 à 03 si elles existent. La RAM de la cartouche est principalement utilisée en complément d'un batterie pour pouvoir stocker les scores ou les sauvegardes et cela même si la Game Boy est éteinte ou la cartouche retirée.\\
\item \textbf{0x0000-0x1FFF:} Cette adresse permet d'autoriser ou d'interdire l'écriture dans la RAM, écrire la valeur 0x0A permet d'autoriser l'écriture et 0x00 de l'interdire.\\
\item \textbf{0x2000-0x3FFF:} Ecrire à cette adresse permet de sélectionner une banque. La banque est sélectionnée en fonction des 5 bits de poids faible, par contre si 0x00 est écrit la banque sélectionnée sera la banque 01, la même chose se passe pour les banques 20, 40 et 60.\\
\item \textbf{0x4000-0x5FFF:} Ce registre de 2 bits permet de sélectionner une banque de RAM. Suivant le mode sélectionner (voir plus bas) il pourra aussi servir à sélectionner les 2 bits de poids fort de la banque de ROM.\\
\item \textbf{0x6000-0x7FFF:} Ce registre de 1 bits va permettre de savoir comment vont être utilisés les 2 bits du registre précédent. Si l'on écrit la valeur 0x00 alors on les utilisera pour choisir la banque de ROM, par contre si 0x01 est écrit se sera pour choisir la banque de RAM.\\
\end{itemize}
\subsubsection{MBC2}
	La puce MBC2 est une version améliorée de la puce précédente, elle est utilisée pour les jeu ayant au plus 256 KByte de ROM et 4x512 bits de RAM.
\\Les différences entre les deux puces sont les suivantes:\\
\begin{itemize}
\item \textbf{0x4000-0x7FFF:} Même chose que la puce précédente sauf qu'un total de 16 banques de ROM est supporté.\\
\item \textbf{0A000-A1FF:} Le MBC2 n'étant pas compatible avec la RAM externe, 512*4 bits de RAM sont inclus directement dans la puce du MBC, ce qui requiert une batterie pour sauvegarder les données durant les périodes ou la Game Boy est éteinte.\\
\item \textbf{0x0000-0x1FFF:} Cette adresse permet de d'activer ou de désactiver la RAM. Le plsu petit bit signifiactif de l'adresse haute du Byte doit être 0, pour activer ou désactiver la RAM.\\
\item \textbf{0x2000-0x3FFF:} Les 4 bits de poids faible écris ici serve à sélectionner la banque de ROM.\\
\end{itemize}
\subsubsection{MBC3}
	La puce MBC3 est la dernière version de la puce MBC1, compatible avec la Game Boy, elle est principalement utilisée pour les jeux prenant en compte l'heure actuelle et donc ayant besoin d'une horloge interne à la cartouche.\\
\begin{itemize}
\item \textbf{0x0000-0x3FFF:} Même chose que le MBC1.\\
\item \textbf{0x4000-0x7FFF:} Même chose que le MBC1 sauf que les banques 20, 40 et 60 sont accessibles.\\
\item \textbf{0xA000-0xBFFF:} Cette espace est utilisé pour accéder à une banque de RAM externe ou au registre d'horloge.\\
\item \textbf{0x0000-0x1FFF:} Même chose que le MBC1.\\
\item \textbf{0x2000-0x3FFF:} Même chose que le MBC1 sauf que les 7 bits du numéro de banque sont directement écris ici.\\
\item \textbf{0x4000-0x5FFF:} Même chose que pour le MBC1 écrire une valeur entre 0x00 et 0x03 permet de choisir la banque de RAM correspondante, par contre écrire une valeur entre 0x08 et 0x0C permet de sélectionner le registre d'horloge correspondant.\\
\item \textbf{0x6000-0x7FFF:} Faire passer la valeur de 0x00 à 0x01 permet de verrouiller l'heure actuelle dans les registres d'horloge. Pour la déverrouiller la même procédure doit être répétée.\\ 
\end{itemize}


\section{GPU}
	Le GPU a été l'un des composants clé à développer, car il provoque un grand nombre d'interruption et nous ne pouvions pas réellement tester notre émulateur avant de l'avoir terminé.\\

\subsection{SDL}
	La première étape a été le choix des outils à utiliser pour implémenter les fonctionnalité de l'écran lCD. Le choix de la SDL (Simple Directmedia Layer) s'est fait naturellement de part sa simplicité et le fait que certains d'entre nous l'aient déja utilisée dans le passé, mais aussi pour sa puissance et ses fonctionnalités bas niveau adaptées à nos besoins.\\

\subsection{structures de données}
	Nous savions qu'une grande partie des opérations du GPU porterait sur les tuiles et les sprites, nous avons donc choisis de créer deux structures de données pour pouvoir gérer et manipuler efficacement ceux-ci:\\ 
\begin{lstlisting}
typedef struct{
        BYTE px[16][8];
        BYTE size;
        BYTE x_flip;
        BYTE y_flip;
        BYTE palette;
}tile_t;

typedef struct{
        BYTE x;
        BYTE y;
        BYTE pattern_nb;
        BYTE attributes;
}sprite_t;
\end{lstlisting}

L'autre point important est la gestion de l'écran et de l'affichage, pour cela nous avons utilisé la SDL et donc créé les surfaces nécessaires:\\
\begin{lstlisting}
BYTE gpu_screen[144][160];
SDL_Surface* sdl_matrix[144][160];
SDL_Surface *sdl_screen;
\end{lstlisting}

La matrice gpu_screen sert à stocker les valeurs de tout les pixels à afficher, cette matrice sera converti en surface SDL pour l'affichage et sera stockée dans sdl_matrix. Sdl_screen correspond à l'écran c'est sur cette variable que sdl_matrix sera appliquée.\\

\subsection{initialisation}
	L'initialisation des données est relativement simple, car seule l'écran géré par la SDL demande une initialisation particulière:\\
\begin{lstlisting}
void gpu_init(SDL_Surface *sdl_scr){
        current_line = 0;
        vblank_clock_counter = 0;
        line_clock_counter = 0;
        frame_skip = 0;
        frame_counter = 0;
        
	sdl_screen = sdl_scr;
        sdl_screenTemp = SDL_CreateRGBSurface(SDL_VIDEO_FLAGS,160,144,32, 0, 0, 0, 0);
        SDL_WM_SetCaption("Groboy", NULL);
        screen_mode = 0;
        set_speed(60);
}

\end{lstlisting}

Comme on peut le voir ci_dessus, les différents compteurs sont initialisés à 0, puis l'écran est initialisé avec la variable passé en paramêtres. On lui donne les différentes propriétés voulues grâce à "SDL_VIDEO_FLAGS", dans notre cas la possibilité d'être redimensionné.\\

\subsection{Algorithme principal}
	Suite aux points précédents, nous avons mis en place un algorithme permettant de gérer les différentes phases du GPU (VBlank, HBlank, etc...). Cette algorithme servira de base pour les GPU car les appels de toutes les autre fonctions se feront dans des phases précises. Etudions cet algorithme plus en détails:\\

\begin{lstlisting}
	vblank_clock_counter += cycles;
	if(vblank_clock_counter >= 70224){
		current_line = 0;
      		vblank_clock_counter -= 70224;
        	line_clock_counter = vblank_clock_counter;
	}
	current_line = vblank_clock_counter / 456;
	set_force_write();
	memory_write(0xFF44, current_line);
	reset_force_write();
\end{lstlisting}	

Dans cette partie, l'on ajoute le nombre de cycle fait par le CPU au compteur du VBlank et si le compteur dépasse 70224, qui est le nombre de cycles correspondant à une réactualisation de l'écran alors on déduit ce nombre du compteur. Cela permet de gérer les différents cycles d'affichage. Ensuit l'on écrit dans le registre de position de l'écran, la ligne où l'on se trouve.

\begin{lstlisting}                                        
     	lyc = memory_read(0xFF45);
        if(current_line == lyc){                        
          	  if(!(lcdstat & 0x04)){                  
                       	  lcdstat |= 0x04;
                          memory_write(0xFF41, lcdstat);
                          if(lcdstat & 0x40){
    	                            make_request(LCD_STAT);
                          }
                  }
         }
         else{
             	if(lcdstat & 0x04){
       		             lcdstat &= 0xFB;
                             memory_write(0xFF41, lcdstat);
                        }
         	}

\end{lstlisting}
Cette partie permet la mise à jour du "coincidence flag", en effet si la lign_actuelle est la même que celle contenue dans le registre LYC alors si le flag n'est pas mis on le met. L'utilité de cette partie est principalement de provoquer une interruption si le flag est à 1.

\begin{lstlisting}
if(vblank_clock_counter >= 65664){ //Si on entre dans la période de vblank
                if(!(lcdstat & 0x01)){
                        lcdstat &= 0xFC;
                        memory_write(0xFF41, lcdstat | 1);
                        draw_screen();
                        make_request(V_BLANK);
                        if(lcdstat & 0x10) make_request(LCD_STAT);
                }
        }
        else{
                line_clock_counter += cycles;
                if(line_clock_counter >= 456) line_clock_counter -= 456;
                if(line_clock_counter <= 80){ //mode 2
                        if(!(lcdstat & 0x02) != 2){
                                lcdstat &= 0xFC;
                                memory_write(0xFF41, lcdstat | 2);
                                if(lcdstat & 0x20) make_request(LCD_STAT);
                        }
                }
                else if(line_clock_counter <= 252){ //mode 3
                        if((lcdstat & 0x03) != 3){
                                memory_write(0xFF41, lcdstat | 3);
                        }
                }
                else {                          //mode 0 
                        if(lcdstat & 0x03){
                                memory_write(0xFF41, lcdstat & 0xFC);
                                if(lcdstat & 0x08){
                                        make_request(LCD_STAT);
                                }
                                if(lcdc & 0x80) gpu_drawline();
                                else gpu_drawblackline();
                        }
                }
        }

\end{lstlisting}
La dernière partie de cet algorithme est très importante puisque c'est ici que l'on execute les différents taches en fonction des périodes. Si l'on est en période de VBlank alors l'on va tout d'abord dessiner l'écran puis envoyer une interruption de type VBlank ce qui va autoriser de nouveau le CPU à écrire dans la VRAM et l'OAM. SI l'on n'est pas dans une période de VBlank alors en fonction des modes vu en partie hardware, l'on va envoyer ou non une interruption, mettre à jour les différents flags et/ou dessiner une ligne.\\

\subsection{Les fonctions d'affichage}
L'algorithme principal mis en place, l'étape suivante était le remplissage de la martrice de pixels. Pour cela nous avons implémenté une fonction gpu_drawline(), qui comme son nom l'indique va remplir une ligne de la matrice, cette fonction est appelée par l'algorithme vu précédent, lorsque le GPU passe en période de HBlank. Son fonctionnement est le suivant:\\
\begin{itemize}
\item \textbf{Si le Background est établi:}
	On regarde tout d'abord quelles sont la ligne et la colonne courante, puis l'on va chercher dans la matrice contenant les tuiles du Background, la tuile correpondante. L'on récupère ensuite la position en x et en y du pixel à déssiner par rapport à la tuile, on parcours toute la ligne en stockant dans la matrice les pixels.\\
\item \textbf{Si la Window est établie:}
	Même principe que le Background, sauf qu'il faut en plus regarder si la tuile est visible à l'écran ou non.\\
\item \textbf{Si les sprites sont établis:}
	Tout d'abord l'on récupère les sprites et on les stockent dans un tableau de sprites (structure vu précédement), ensuite on les tri en fonction de leur position. Puis l'on parcours la ligne pour stocker dans la matrice les valeurs des pixels en n'oubliant pas d'appliquer les différentes options sur les sprites (flip vertical/horizontal).\\
\end{itemize}

Cette fonction implémentée, la dernière étape était d'afficher la matrice obtenue, avec la SDL, nous avons donc créer une fonction draw_screen(), qui est appelée durant la période de VBlank qui permet de redessiner l'écran à partir de la matrice.\\

\begin{lstlisting}
	if(frame_counter < frame_skip) frame_counter++;
        else{
                frame_counter = 0;
                for(int i=0; i<144; i++)
                {
                        for(int j=0; j<160; j++)
                        {
                                if(gpu_screen[i][j] == 0)
                                        *((Uint32*)(sdl_screenTemp->pixels) + j + i * sdl_screenTemp->w) = SDL_MapRGB(sdl_screenTemp->format, 255,255,255);
                                else if(gpu_screen[i][j] == 1)
                                        *((Uint32*)(sdl_screenTemp->pixels) + j + i * sdl_screenTemp->w) = SDL_MapRGB(sdl_screenTemp->format, 170,170,170);
                                else if(gpu_screen[i][j] == 2)
                                        *((Uint32*)(sdl_screenTemp->pixels) + j + i * sdl_screenTemp->w) = SDL_MapRGB(sdl_screenTemp->format, 85,85,85);
                                else
                                        *((Uint32*)(sdl_screenTemp->pixels) + j + i * sdl_screenTemp->w) = SDL_MapRGB(sdl_screenTemp->format, 0,0,0);
                        }
                }
                SDL_SoftStretch(sdl_screenTemp, NULL, sdl_screen, NULL);
                SDL_Flip(sdl_screen); /* Mise à jour de l'écran */
                sleep_SDL();
        }

\end{lstlisting}
Comme on peut le voir ci-dessus, la mise à jour de l'écran se fait en fonction du nombre de frame définit, cela permet d'éviter à l'écran de se mettre à jour tout le temps alors que rien n'as changé. La matrice est transformée (en fonction des couleurs de chaque pixels) en matrice RGB utilisable par la SDL. Cette matrice est ensuite ajustée à la taille de l'écran puis appliquée à l'écran.

\section{Sauvegarde de jeu}
Nous allons dans cette partie expliquer comment nous avons réalisé les sauvegardes dites "classiques".\\
\subection{Principe}
	La sauvegarde d'un jeu classique se fait dans la RAM de la cartouche contenant celui-ci, lors de la sauvegarde toute les données nécessaire sont stockées. Ces données sont maintenues par une batterie. L'algorithme utilisé pour effectuer cette sauvegarde est relativement simple puisque qu'il s'agit de sauvegarder dans un fichier la RAM du jeu lorsque l'on quitte celui-ci et de la restaurer lorsqu'on le relance.
\subsection{Algorithme}
\begin{lstlisting}
	void save()
	{
        	char name[0x10000];
        	char path[0x1000C];
        	strcpy(path, "saves/");
        	get_gamename(name);
        	strcat(path,name);
        	strcat(path,".save");
        	file = fopen(path,"w+");
        	if(file == NULL)printf("Error when creating save file\n");
        	else{
        	        save_cartridge(file);
        	}
        	fclose(file);
	}

\end{lstlisting}

Un fichier avec le même nom que le jeu est ouvert en écriture (créer s'il n'existe pas), puis le module MMU de l'émulateur va écrire toutes les données de la RAM. Lors du lancement d'un jeu le MMU fera l'opération inverse, si le fichier existe il chargera la RAM du jeu à partir du fichier.
\end{document}
